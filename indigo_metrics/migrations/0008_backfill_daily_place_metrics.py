# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-09-01 14:16
from __future__ import unicode_literals

from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations

# we import this directly so that we have access to some class methods
from indigo_api.models import Country as RealCountry


def populate_daily_placemetrics(apps, schema_editor):
    Action = apps.get_model("actstream", "Action")
    DailyPlaceMetrics = apps.get_model("indigo_metrics", "DailyPlaceMetrics")
    Country = apps.get_model("indigo_api", "Country")
    Locality = apps.get_model("indigo_api", "Locality")
    db_alias = schema_editor.connection.alias

    places = {}

    for action in Action.objects.using(db_alias).all():
        if action.data and action.data.get('place_code'):
            place_code = action.data['place_code']
            if place_code not in places:
                try:
                    country, locality = RealCountry.get_country_locality(place_code)
                    country = Country.objects.get(pk=country.pk)
                    if locality:
                        locality = Locality.objects.get(pk=locality.pk)
                    places[place_code] = (country, locality)
                except ObjectDoesNotExist:
                    continue

            country, locality = places[place_code]
            metrics, created = DailyPlaceMetrics.objects.get_or_create(
                date=action.timestamp.date(),
                country=country,
                locality=locality,
                place_code=place_code,
            )
            metrics.n_activities += 1
            metrics.save()


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_metrics', '0007_dailyplacemetrics'),
    ]

    operations = [
        migrations.RunPython(populate_daily_placemetrics, migrations.RunPython.noop, elidable=True),
    ]
