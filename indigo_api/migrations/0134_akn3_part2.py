# Generated by Django 2.2.13 on 2020-06-17 14:54
import json
import logging

from django.db import migrations
from django.contrib.contenttypes.models import ContentType
from lxml import etree
from reversion.models import Version
from cobalt import Act
from cobalt.schemas import assert_validates

from indigo_api.data_migrations.akn3 import AKN3Laggards


log = logging.getLogger(__name__)
migration = AKN3Laggards()


def update_xml(xml):
    cobalt_doc = Act(migration.remove_akn2_namespaces(xml))
    migration.migrate_act(cobalt_doc)
    return cobalt_doc.to_xml().decode("utf-8")


def forward(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Document = apps.get_model("indigo_api", "Document")
    ct_doc = ContentType.objects.get_for_model(Document)

    for document in Document.objects.using(db_alias).order_by('-pk'):
        log.info(f"Migrating document: {document.pk}")
        document.document_xml = update_xml(document.document_xml)
        try:
            assert_validates(Act(document.document_xml))
        except etree.DocumentInvalid as e:
            log.warning(f"Ignoring validation error: {e}")
        document.save()

        # Update historical Document versions
        for version in Version.objects.filter(content_type=ct_doc.pk) \
                .filter(object_id=document.pk).using(db_alias).all():
            log.info(f"Migrating document version: {version.pk}")
            data = json.loads(version.serialized_data)
            data[0]['fields']['document_xml'] = update_xml(data[0]['fields']['document_xml'])
            version.serialized_data = json.dumps(data)
            version.save()


class Migration(migrations.Migration):

    dependencies = [
        ('indigo_api', '0133_migrate_commencement_provisions'),
    ]

    operations = [
        migrations.RunPython(forward),
    ]
